# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BigInt', [dirname(__file__)])
        except ImportError:
            import _BigInt
            return _BigInt
        if fp is not None:
            try:
                _mod = imp.load_module('_BigInt', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BigInt = swig_import_helper()
    del swig_import_helper
else:
    import _BigInt
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BigInt.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _BigInt.SwigPyIterator_value(self)
    def incr(self, n = 1): return _BigInt.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _BigInt.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _BigInt.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _BigInt.SwigPyIterator_equal(self, *args)
    def copy(self): return _BigInt.SwigPyIterator_copy(self)
    def next(self): return _BigInt.SwigPyIterator_next(self)
    def __next__(self): return _BigInt.SwigPyIterator___next__(self)
    def previous(self): return _BigInt.SwigPyIterator_previous(self)
    def advance(self, *args): return _BigInt.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _BigInt.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _BigInt.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _BigInt.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _BigInt.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _BigInt.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _BigInt.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _BigInt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class BigInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BigInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BigInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _BigInt.new_BigInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _BigInt.delete_BigInt
    __del__ = lambda self : None;
    def normalize(self): return _BigInt.BigInt_normalize(self)
    __swig_getmethods__["sig"] = lambda x: _BigInt.BigInt_sig
    if _newclass:sig = staticmethod(_BigInt.BigInt_sig)
    def length(self): return _BigInt.BigInt_length(self)
    def __neg__(self): return _BigInt.BigInt___neg__(self)
    def __add__(self, *args): return _BigInt.BigInt___add__(self, *args)
    def __iadd__(self, *args): return _BigInt.BigInt___iadd__(self, *args)
    def __sub__(self, *args): return _BigInt.BigInt___sub__(self, *args)
    def __isub__(self, *args): return _BigInt.BigInt___isub__(self, *args)
    def __div__(self, *args): return _BigInt.BigInt___div__(self, *args)
    def __idiv__(self, *args): return _BigInt.BigInt___idiv__(self, *args)
    def __mod__(self, *args): return _BigInt.BigInt___mod__(self, *args)
    def __imod__(self, *args): return _BigInt.BigInt___imod__(self, *args)
    def divide(self, *args): return _BigInt.BigInt_divide(self, *args)
    def __mul__(self, *args): return _BigInt.BigInt___mul__(self, *args)
    def __imul__(self, *args): return _BigInt.BigInt___imul__(self, *args)
    def __lshift__(self, *args): return _BigInt.BigInt___lshift__(self, *args)
    def __ilshift__(self, *args): return _BigInt.BigInt___ilshift__(self, *args)
    def __rshift__(self, *args): return _BigInt.BigInt___rshift__(self, *args)
    def __irshift__(self, *args): return _BigInt.BigInt___irshift__(self, *args)
    def __xor__(self, *args): return _BigInt.BigInt___xor__(self, *args)
    def __nonzero__(self):
        return _BigInt.BigInt___nonzero__(self)
    __bool__ = __nonzero__


    def __ne__(self, *args): return _BigInt.BigInt___ne__(self, *args)
    def __lt__(self, *args): return _BigInt.BigInt___lt__(self, *args)
    def __gt__(self, *args): return _BigInt.BigInt___gt__(self, *args)
    def __eq__(self, *args): return _BigInt.BigInt___eq__(self, *args)
    def __le__(self, *args): return _BigInt.BigInt___le__(self, *args)
    def __ge__(self, *args): return _BigInt.BigInt___ge__(self, *args)
    def compare(self, *args): return _BigInt.BigInt_compare(self, *args)
    def toInt(self): return _BigInt.BigInt_toInt(self)
    def toString(self): return _BigInt.BigInt_toString(self)
    def _print(self): return _BigInt.BigInt__print(self)
    def printWithCommas(self, *args): return _BigInt.BigInt_printWithCommas(self, *args)
    def readNumberFromFile(self, *args): return _BigInt.BigInt_readNumberFromFile(self, *args)
    def writeNumber(self, *args): return _BigInt.BigInt_writeNumber(self, *args)
    def writeNumberToFilE(self, *args): return _BigInt.BigInt_writeNumberToFilE(self, *args)
    def powm(self, *args): return _BigInt.BigInt_powm(self, *args)
BigInt_swigregister = _BigInt.BigInt_swigregister
BigInt_swigregister(BigInt)

def BigInt_sig(*args):
  return _BigInt.BigInt_sig(*args)
BigInt_sig = _BigInt.BigInt_sig

# This file is compatible with both classic and new-style classes.


